initial_value <- 100
n <- length(risky_returns)
portfolio_value <- rep(initial_value, n)
cushion <- rep(0, n)
allocation_risky <- rep(0, n)
allocation_safe <- rep(0, n)
# Convert dates to Year to identify when the year changes
years <- format(dates, "%Y")
# Ensure there are no NA years; if there are, handle or exit function
if (any(is.na(years))) {
stop("NA values found in year calculations. Check the 'dates' vector.")
}
# Initialize a list to keep track of floor values by year
floor_values <- setNames(rep(floor * initial_value, length(unique(years))), unique(years))
for (t in 1:(n-1)) {
# Check if the year has changed and update floor value
if (t < n && years[t + 1] != years[t]) {
floor_values[years[t + 1]] <- max(portfolio_value[t] * floor, floor_values[years[t]])
}
cushion[t] <- max(portfolio_value[t] - floor_values[years[t]], 0)
allocation_risky[t] <- min(cushion[t] * multiplier, portfolio_value[t])
allocation_safe[t] <- portfolio_value[t] - allocation_risky[t]
portfolio_value[t + 1] <- allocation_risky[t] * (1 + risky_returns[t]) + allocation_safe[t] * (1 + safe_returns[t])
}
portfolio_returns <- c(NA, diff(portfolio_value) / portfolio_value[-n])
return(list(portfolio_returns = portfolio_returns,
allocation_risky = allocation_risky,
allocation_safe = allocation_safe,
floor_values = floor_values))
}
# Example call to the function
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
initial_floor <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates)
cppi_result
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)
agg_returns <- calculate_returns(agg_data)
# Dates for the CPPI function
dates <- index(spy_data)
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
length(spy_returns)
length(spy_returns)
length(agg_returns)
length(dates)
spy_returns
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-1]
spy_returns
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
length(spy_returns)
length(agg_returns)
length(dates)
dates
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns) - 1
cum_agg_returns <- cumprod(1 + agg_returns) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns) - 1
cum_returns_df <- data.frame(Date = dates, SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Plot allocations using area chart
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Risky, fill = "Risky"), alpha = 0.6) +
geom_area(aes(y = Safe, fill = "Safe"), alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
cum_cppi_returns
cppi_result
cppi_result$portfolio_returns
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_cppi_returns
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates, SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns) - 1
cum_agg_returns <- cumprod(1 + agg_returns) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates, SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates, SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Plot allocations using area chart
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Risky, fill = "Risky"), alpha = 0.6) +
geom_area(aes(y = Safe, fill = "Safe"), alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
# Calculate the percentage allocations
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 100
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 100
# Remove the original allocation columns if no longer needed
allocation_df <- allocation_df[, c("Date", "Pct_Risky", "Pct_Safe")]
allocation_df
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = "Safe"), alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation (%)", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 100
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 100
allocation_df <- allocation_df[, c("Date", "Pct_Risky", "Pct_Safe")]
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = "Safe"), alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation (%)", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
# Create the stacked area plot
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), position = "stack", alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = "Safe"), position = "stack", alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Percentage of Portfolio (%)", x = "Date") +
scale_fill_manual("", values = c(Risky = "blue", Safe = "grey")) +
theme_minimal()
plot(allocation_df)
ggplot(allocation_df)
bar(allocation_df)
allocation_df
ggplot(allocation_df, aes(x = Date)) +
geom_bar(aes(y = Pct_Risky, fill = "Risky"), stat = "identity", position = "stack", alpha = 0.6) +
geom_bar(aes(y = Pct_Safe, fill = "Safe"), stat = "identity", position = "stack", alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation (%)", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
ggplot(allocation_df, aes(x = Date)) +
geom_bar(aes(y = Pct_Risky, fill = "Risky"), stat = "identity", position = "stack", alpha = 0.6) +
geom_bar(aes(y = Pct_Safe, fill = "Safe"), stat = "identity", position = "stack", alpha = 0.6) +
labs(title = "CPPI Allocations Over Time", y = "Allocation (%)", x = "Date") +
scale_fill_manual("", values = c("Risky" = "blue", "Safe" = "grey")) +
theme_minimal()
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Risky, fill = "Risky"), position = 'fill', alpha = 0.6) +
geom_area(aes(y = Safe, fill = "Safe"), position = 'fill', alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Risky" = "blue", "Safe" = "grey")) +
labs(title = "CPPI Allocations Over Time", y = "Allocation Percentage", x = "Date", fill = "Asset Type") +
theme_minimal()
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 100
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 100
allocation_df <- allocation_df[, c("Date", "Pct_Risky", "Pct_Safe")]
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Risky, fill = "Risky"), position = 'fill', alpha = 0.6) +
geom_area(aes(y = Safe, fill = "Safe"), position = 'fill', alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Risky" = "blue", "Safe" = "grey")) +
labs(title = "CPPI Allocations Over Time", y = "Allocation Percentage", x = "Date", fill = "Asset Type") +
theme_minimal()
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), position = 'fill', alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = "Safe"), position = 'fill', alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Risky" = "blue", "Safe" = "grey")) +
labs(title = "CPPI Allocations Over Time", y = "Allocation Percentage", x = "Date", fill = "Asset Type") +
theme_minimal()
# Plot the stacked area chart
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), position = 'stack') +
geom_area(aes(y = Pct_Safe, fill = "Safe"), position = 'stack') +
scale_fill_manual(values = c("Risky" = "blue", "Safe" = "grey")) +
labs(title = "CPPI Allocations Over Time",
x = "Date",
y = "Percentage of Portfolio (%)",
fill = "Asset Type") +
theme_minimal()
plot(allocation_df$Pct_Risky)
lines(allocation_df$Pct_Safe)
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = "Risky"), alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = "Safe"), alpha = 0.6) +
labs(title = "CPPI Allocations Over Time",
x = "Date",
y = "Percentage of Total Allocation",
fill = "Asset Type") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
ggplot(allocation_df, aes(x = Date)) +
geom_area(aes(y = Pct_Risky, fill = 'Risky'), alpha = 0.6) +
geom_area(aes(y = Pct_Safe, fill = 'Safe'), alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Risky' = 'blue', 'Safe' = 'grey')) +
labs(title = 'CPPI Allocations Over Time',
x = 'Date',
y = 'Percentage of Portfolio',
fill = 'Allocation') +
theme_minimal() +
theme(legend.position = "bottom")
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 100
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 100
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
#--------------- Plot Stacked Area Chart ---------------
library(ggplot2)
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
allocation_df
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 100
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 100
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
# Create the plotly interactive area chart
plot <- ggplot(allocation_long, aes(x = Date, y = value, fill = variable, text = paste(variable, value))) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
# Convert ggplot to plotly object
plotly_obj <- ggplotly(plot, tooltip = "text")
# Print the plot
plotly_obj
plot <- ggplot(allocation_long, aes(x = Date, y = value, fill = variable, text = paste(variable, value))) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
plot <- ggplot(allocation_long, aes(x = Date, y = value, fill = variable, text = paste(variable, value))) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
